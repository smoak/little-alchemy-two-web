type Query {
  items(after: String, first: Int, before: String, last: Int): ItemConnection!
  node(id: ID!): Node
  item(name: String!): Item
  search(query: String!): SearchResults!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type ItemConnection {
  edges: [ItemEdge]
  pageInfo: PageInfo!
}

type ItemEdge {
  cursor: String!
  node: Item!
}

type ItemCombination {
  source: Item!
  target: Item!
}

type ItemCombinationConnection {
  edges: [ItemCombinationEdge]
  pageInfo: PageInfo!
}

type ItemCombinationEdge {
  cursor: String!
  node: ItemCombination!
}

type Item implements Node {
  id: ID!
  name: String!
  myths: Boolean!
  creates(after: String, first: Int, before: String, last: Int): ItemCombinationConnection!
  combinations(after: String, first: Int, before: String, last: Int): ItemCombinationConnection!
  imageUrl: String!
}

type ItemSearchResults {
  items(after: String, first: Int, before: String, last: Int): ItemConnection!
}

type NoSearchResults {
  message: String!
}

union SearchResults = NoSearchResults | ItemSearchResults
